
# 机场订阅
proxy-providers:
  Airport1:
    url: ""
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 直连

# 节点信息
proxies:
  - {name: 直连, type: direct}

# 全局配置 
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
allow-lan: true
bind-address: "*"
ipv6: false
unified-delay: true
tcp-concurrent: true
log-level: warning
find-process-mode: 'off'
# interface-name: en0
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 15
disable-keep-alive: false
profile:
  store-selected: true
  store-fake-ip: true

# 控制面板，external-ui 路径如果出现报错，根据你使用的插件进行调整，比如openclash改为： /etc/openclash/run/ui  ，裸核跑改为/etc/mihomo/run/ui
# 需要的自行开启
#external-controller: 0.0.0.0:9090
#secret: ""
#external-ui: "ui"
#external-ui-name: zashboard
#external-ui-url: "https://github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip"

# 嗅探
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - "+.v2ex.com"
  skip-domain:
    - "+.baidu.com"

# 入站  
tun:
  enable: true
  stack: system
  # device: Ethernet99 # 这个通常可以注释掉，让系统自动分配
  auto-route: true
  auto-detect-interface: true
  dns-hijack:
    - any:53
    - tcp://any:53
  strict-route: true
  mtu: 1500
  # 如果有使用zerotier或者headscale等，需要自己配置排除自己的网段
  #route-exclude-address: ["100.80.0.0/24"]


# DNS模块
dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: false
  respect-rules: true
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter-mode: blacklist
  proxy-server-nameserver:
    - https://223.5.5.5/dns-query
  direct-nameserver:
    - 223.5.5.5
    - 119.29.29.29
  nameserver:
    - https://8.8.8.8/dns-query
  nameserver-policy:
    "rule-set:private_domain,cn_domain,apple_domain":
      - 223.5.5.5
      - 119.29.29.29
  fake-ip-filter:
    - "rule-set:private_domain,cn_domain,apple_domain"
    
 
# 出站策略

proxy-groups:
  - {name: 默认代理, type: select, proxies: [自建节点,香港故转, 日本故转, 狮城故转, 美国故转, 香港自动, 日本自动, 狮城自动, 美国自动, 自动选择,香港节点, 日本节点, 狮城节点, 美国节点, 全部节点, 直连],icon: https://cdn.jsdelivr.net/gh/zuluion/Qure/IconSet/Color/Area.png}
  - {name: 漏网之鱼, type: select, proxies: [自建节点,香港故转, 日本故转, 狮城故转, 美国故转, 香港自动, 日本自动, 狮城自动, 美国自动, 自动选择,香港节点, 日本节点, 狮城节点, 美国节点, 全部节点, 直连],icon: https://cdn.jsdelivr.net/gh/zuluion/Qure/IconSet/Color/Final.png}
  - {name: YouTube, type: select, proxies: [自建节点,美国故转, 香港故转, 日本故转, 狮城故转, 美国自动, 香港自动, 日本自动, 狮城自动, 自动选择,香港节点, 日本节点, 狮城节点, 美国节点, 全部节点, 直连],icon: https://cdn.jsdelivr.net/gh/zuluion/Qure/IconSet/Color/YouTube.png}
  - {name: Google, type: select, proxies: [自建节点,香港故转, 日本故转, 狮城故转, 美国故转, 香港自动, 日本自动, 狮城自动, 美国自动, 自动选择,香港节点, 日本节点, 狮城节点, 美国节点, 全部节点, 直连],icon: https://raw.githubusercontent.com/Orz-3/mini/refs/heads/master/Color/Google.png}
  - {name: ChatGPT, type: select, proxies: [自建节点,日本故转, 狮城故转, 美国故转, 香港自动, 日本自动, 狮城自动, 美国自动, 自动选择,香港节点, 日本节点, 狮城节点, 美国节点, 全部节点, 直连],icon: https://cdn.jsdelivr.net/gh/zuluion/Qure/IconSet/Color/ChatGPT.png}
  - {name: Gemini, type: select, proxies: [自建节点,日本故转, 狮城故转, 美国故转, 香港自动, 日本自动, 狮城自动, 美国自动, 自动选择,香港节点, 日本节点, 狮城节点, 美国节点, 全部节点, 直连],icon: https://cdn.jsdelivr.net/gh/zuluion/Qure/IconSet/Color/AI.png}
  - {name: GitHub, type: select, proxies: [自建节点,香港故转, 日本故转, 狮城故转, 美国故转, 香港自动, 日本自动, 狮城自动, 美国自动, 自动选择,香港节点, 日本节点, 狮城节点, 美国节点, 全部节点, 直连],icon: https://raw.githubusercontent.com/Orz-3/mini/refs/heads/master/Color/github.png}
  - {name: OneDrive, type: select, proxies: [自建节点,日本故转, 狮城故转, 美国故转, 香港自动, 日本自动, 狮城自动, 美国自动, 自动选择,香港节点, 日本节点, 狮城节点, 美国节点, 全部节点, 直连],icon: https://cdn.jsdelivr.net/gh/zuluion/Qure/IconSet/Color/OneDrive.png}
  - {name: Microsoft, type: select, proxies: [自建节点,日本故转, 狮城故转, 美国故转, 香港自动, 日本自动, 狮城自动, 美国自动, 自动选择,香港节点, 日本节点, 狮城节点, 美国节点, 全部节点, 直连],icon: https://cdn.jsdelivr.net/gh/zuluion/Qure/IconSet/Color/Microsoft.png}
  - {name: TikTok, type: select, proxies: [自建节点,日本故转, 狮城故转, 美国故转, 香港自动, 日本自动, 狮城自动, 美国自动, 自动选择,香港节点, 日本节点, 狮城节点, 美国节点, 全部节点, 直连],icon: https://cdn.jsdelivr.net/gh/zuluion/Qure/IconSet/Color/TikTok_1.png}
  - {name: Telegram, type: select, proxies: [自建节点,香港故转, 日本故转, 狮城故转, 美国故转, 香港自动, 日本自动, 狮城自动, 美国自动, 自动选择,香港节点, 日本节点, 狮城节点, 美国节点, 全部节点, 直连],icon: https://cdn.jsdelivr.net/gh/zuluion/Qure/IconSet/Color/Telegram.png}
  - {name: NETFLIX, type: select, proxies: [自建节点,狮城故转, 香港故转, 日本故转, 美国故转, 香港自动, 日本自动, 狮城自动, 美国自动, 自动选择,香港节点, 日本节点, 狮城节点, 美国节点, 全部节点, 直连],icon: https://cdn.jsdelivr.net/gh/zuluion/Qure/IconSet/Color/Netflix.png}
  - {name: Speedtest, type: select, proxies: [自建节点,香港故转, 日本故转, 狮城故转, 美国故转, 香港自动, 日本自动, 狮城自动, 美国自动, 自动选择,香港节点, 日本节点, 狮城节点, 美国节点, 全部节点, 直连],icon: https://cdn.jsdelivr.net/gh/zuluion/Qure/IconSet/Color/Airport.png}
  - {name: PayPal, type: select, proxies: [自建节点,日本故转, 香港故转, 狮城故转, 美国故转, 香港自动, 日本自动, 狮城自动, 美国自动, 自动选择,香港节点, 日本节点, 狮城节点, 美国节点, 全部节点, 直连],icon: https://raw.githubusercontent.com/Orz-3/mini/refs/heads/master/Color/Paypal.png}
  - {name: Apple, type: select, proxies: [直连, 默认代理],icon: https://cdn.jsdelivr.net/gh/zuluion/Qure/IconSet/Color/Apple_1.png}
  - {name: 直-连, type: select, proxies: [直连, 默认代理],icon: https://cdn.jsdelivr.net/gh/zuluion/Qure/IconSet/Color/Direct.png}
  - {name: 自建节点, type: select, include-all: true, filter: "(?i)US|diy|custom",icon: https://raw.githubusercontent.com/Orz-3/mini/refs/heads/master/Color/Mimemi.png}
  - {name: 香港节点, type: select, include-all: true, filter: "(?i)港|hk|hongkong|hong kong",icon: https://cdn.jsdelivr.net/gh/zuluion/Qure/IconSet/Color/Hong_Kong.png}
  - {name: 日本节点, type: select, include-all: true, filter: "(?i)日|jp|japan",icon: https://cdn.jsdelivr.net/gh/zuluion/Qure/IconSet/Color/Japan.png}
  - {name: 狮城节点, type: select, include-all: true, filter: "(?i)新加坡|坡|狮城|SG|Singapore",icon: https://cdn.jsdelivr.net/gh/zuluion/Qure/IconSet/Color/Singapore.png}
  - {name: 美国节点, type: select, include-all: true, filter: "(?i)美|us|unitedstates|united states",icon: https://cdn.jsdelivr.net/gh/zuluion/Qure/IconSet/Color/United_States.png}
  - {name: 香港故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$",icon: https://cdn.jsdelivr.net/gh/zuluion/Qure/IconSet/Color/Hong_Kong.png}
  - {name: 日本故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$",icon: https://cdn.jsdelivr.net/gh/zuluion/Qure/IconSet/Color/Japan.png }
  - {name: 狮城故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(新加坡|坡|狮城|SG|Singapore))^((?!(台|日|韩|深|美)).)*$",icon: https://cdn.jsdelivr.net/gh/zuluion/Qure/IconSet/Color/Singapore.png}
  - {name: 美国故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(美|US|(?i)States|America))^((?!(港|台|韩|新|日)).)*$" ,icon: https://cdn.jsdelivr.net/gh/zuluion/Qure/IconSet/Color/United_States.png}
  - {name: 香港自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$",icon: https://cdn.jsdelivr.net/gh/zuluion/Qure/IconSet/Color/Hong_Kong.png}
  - {name: 日本自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$" ,icon: https://cdn.jsdelivr.net/gh/zuluion/Qure/IconSet/Color/Japan.png}
  - {name: 狮城自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(新加坡|坡|狮城|SG|Singapore))^((?!(港|台|日|美)).)*$",icon: https://cdn.jsdelivr.net/gh/zuluion/Qure/IconSet/Color/Singapore.png }
  - {name: 美国自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(美|US|(?i)States|America))^((?!(港|台|日|韩|新)).)*$",icon: https://cdn.jsdelivr.net/gh/zuluion/Qure/IconSet/Color/United_States.png}
  - {name: 自动选择, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "^((?!(直连)).)*$",icon: https://cdn.jsdelivr.net/gh/zuluion/Qure/IconSet/Color/Final.png}
  - {name: 全部节点, type: select, include-all: true,icon: https://cdn.jsdelivr.net/gh/zuluion/Qure/IconSet/Color/Airport.png}

# 规则匹配

rules:
  - DST-PORT,3478,DIRECT
  - DST-PORT,41641,DIRECT
  - RULE-SET,qflite,REJECT
  - RULE-SET,zhuzhi,REJECT
  - RULE-SET,directlite,直-连
  - RULE-SET,proxylite,默认代理
  - RULE-SET,private_domain,直-连
  - RULE-SET,apple_domain,Apple
  - RULE-SET,gemini_domain,Gemini
  - RULE-SET,ai,ChatGPT
  - RULE-SET,github_domain,GitHub
  - RULE-SET,youtube_domain,YouTube
  - RULE-SET,google_domain,Google
  - RULE-SET,onedrive_domain,OneDrive
  - RULE-SET,microsoft_domain,Microsoft
  - RULE-SET,tiktok_domain,TikTok
  - RULE-SET,speedtest_domain,Speedtest
  - RULE-SET,telegram_domain,Telegram
  - RULE-SET,netflix_domain,NETFLIX
  - RULE-SET,paypal_domain,PayPal
  - RULE-SET,gfw_domain,默认代理
  - RULE-SET,geolocation-!cn,默认代理
  - RULE-SET,cn_domain,直-连
  - RULE-SET,google_ip,Google,no-resolve
  - RULE-SET,netflix_ip,NETFLIX,no-resolve
  - RULE-SET,telegram_ip,Telegram,no-resolve
  - RULE-SET,cn_ip,直-连
  - MATCH,漏网之鱼

# 规则集
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}
rule-providers: 
  qflite: { <<: *class, url: "https://raw.githubusercontent.com/TG-Twilight/AWAvenue-Ads-Rule/main/Filters/AWAvenue-Ads-Rule-Surge-RULE-SET.list"}
  zhuzhi: { <<: *class, url: "https://raw.githubusercontent.com/lij1122/rule/refs/heads/main/zhuzi.list"}
  
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  proxylite: { <<: *class, url: "https://raw.githubusercontent.com/lij1122/rule/refs/heads/main/proxy.list"}
  directlite: { <<: *class, url: "https://raw.githubusercontent.com/lij1122/rule/refs/heads/main/direct.list"}
  ai: {  <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-!cn.mrs" }
  gemini_domain: { <<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Gemini/Gemini.list"}
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}
  netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs"}
  paypal_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs"}
  onedrive_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs"}
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs"}
  apple_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs"}
  speedtest_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs"}
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"}
  gfw_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs"}
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"}
  
  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}
  netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs"}
